# 使用英俄翻译模型来往返翻译

import torch


# 输出转译后的模版
def print_and_log(message, file):
    with open(file, 'w') as log_file:
        for msg in message:
            log_file.write(msg + '\n')

    print(f'已经输出{len(message)}个模版')


# 读取种子模版
def load_seed_template(seed_file):
    unique_template = set()
    with open(seed_file, 'r') as file:
        for line in file:
            line = line.strip()
            unique_template.add(line)

    lines = list(unique_template)
    return lines


# 往返翻译
def translate_generation(seed_templates, num):
    paraphrase = set(seed_templates)
    for k in range(num):
        print(f'目前是第{k}次迭代')
        for i in range(len(seed_templates)):
            text = seed_templates[i]
            print('原句子：')
            print(text)
            translate_text = ru2en.translate(en2ru.translate(text))
            paraphrase.add(translate_text)
            print('转译后的句子：')
            print(translate_text)
            seed_templates[i] = translate_text

    translate_template = list(paraphrase)
    return translate_template


en2ru = torch.hub.load('pytorch/fairseq', 'transformer.wmt19.en-ru.single_model', tokenizer='moses', bpe='fastbpe')
ru2en = torch.hub.load('pytorch/fairseq', 'transformer.wmt19.ru-en.single_model', tokenizer='moses', bpe='fastbpe')

if __name__ == '__main__':
    ru_file_name = 'output_virus_ru.txt'
    seed_file_name = 'seed_template_virus.txt'
    texts = load_seed_template(seed_file_name)
    translate_template = translate_generation(texts, 3)
    print_and_log(translate_template, ru_file_name)
