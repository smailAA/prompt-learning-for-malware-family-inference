# 用来画评分区间图


import csv
import matplotlib.pyplot as plt


def plot_score_boxplot(input_file):
    short_template_scores = []
    long_template_scores = []

    with open(input_file, 'r') as file:
        reader = csv.DictReader(file)
        for row in reader:
            short_template_score_str = row['short_template_score']
            long_template_score_str = row['long_template_score']

            # 检查字符串是否为空
            if short_template_score_str and long_template_score_str:
                short_template_scores.append(float(short_template_score_str))
                long_template_scores.append(float(long_template_score_str))

    all_data = [short_template_scores, long_template_scores]

    # 首先有图（fig），然后有轴（ax）
    fig, axes = plt.subplots()

    bplot = axes.boxplot(all_data,
                         vert=True,
                         patch_artist=True,
                         labels=['Short Template', 'Long Template'],
                         showmeans=True,
                         meanline=False)

    # axes[0]表示在第一张图的轴上描点画图
    # vert=True表示boxplot图是竖着放的
    # patch_artist=True 表示填充颜色

    # 颜色填充
    colors = ['pink', '#5c7aac']

    for patch, color in zip(bplot['boxes'], colors):
        patch.set_facecolor(color)

    # 添加标题和标签
    plt.title('Box Plot of Short and Long Template Scores')
    plt.xlabel('Template Type')
    plt.ylabel('Scores')



    # 添加网格线
    axes.grid(True)


    # 显示图形
    plt.show()


def plot_scatter(input_file):
    short_template_scores = []
    long_template_scores = []

    with open(input_file, 'r') as file:
        reader = csv.DictReader(file)
        for row in reader:
            short_template_score_str = row['short_template_score']
            long_template_score_str = row['long_template_score']

            # 检查字符串是否为空
            if short_template_score_str and long_template_score_str:
                short_template_scores.append(float(short_template_score_str))
                long_template_scores.append(float(long_template_score_str))

    all_data = [short_template_scores, long_template_scores]

    # 首先有图（fig），然后有轴（ax）
    fig, axes = plt.subplots()
    x = range(200)

    plt.scatter(x, all_data[0], c='#DCC68E', alpha=0.9, label='Single-sentence Template')
    plt.scatter(x, all_data[1], c='#00A4B1', alpha=0.8, label='Multi-sentence Template')

    # 添加标题和标签
    # plt.title('Scatter plot of Short and Long Template Scores')
    plt.xlabel('Templates')
    plt.ylabel('Scores')

    # 添加网格线
    axes.grid(True)
    plt.legend()

    # 显示图形
    plt.show()

def plot_hist(input_file):
    short_template_scores = []
    long_template_scores = []

    with open(input_file, 'r') as file:
        reader = csv.DictReader(file)
        for row in reader:
            short_template_score_str = row['short_template_score']
            long_template_score_str = row['long_template_score']

            # 检查字符串是否为空
            if short_template_score_str and long_template_score_str:
                short_template_scores.append(float(short_template_score_str))
                long_template_scores.append(float(long_template_score_str))

    all_data = [short_template_scores, long_template_scores]

    # 首先有图（fig），然后有轴（ax）
    fig, axes = plt.subplots()
    plt.hist(all_data[0],bins=30, color='#DCC68E', alpha=0.9, label='Single-sentence Template')
    plt.hist(all_data[1], bins=8,color='#00A4B1', alpha=0.8, label='Multi-sentence Template')

    # 添加标题和标签
    # plt.title('histogram of Single-sentence and Multi-sentence Template Scores')
    plt.xlabel('Score Range (0-1)')
    plt.ylabel('Frequency')

    # 添加网格线
    axes.grid(True)
    plt.legend()

    # 显示图形
    plt.show()



if __name__ == "__main__":
    input_file_path = "single_template_score.csv"  # 替换为实际文件路径
    plot_scatter(input_file_path)
